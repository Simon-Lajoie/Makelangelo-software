# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: CI with Maven

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        jvm_flag: 
          - name: MaxRAM                      # TEST 1: RAM
            flags: "-XX:MaxRAM=2g" 
          - name: GCLogging                   # TEST 2: Garbage Collection Logging
            flags: "-Xlog:gc*:file=gc.log" 
          - name: ReservedCodeCache           # TEST 3: Code Cache
            flags: "-XX:ReservedCodeCacheSize=1024M" 
          - name: UseG1GC                     # TEST 4: Garbage Collector
            flags: "-XX:+UseG1GC" 
          - name: PrintCompilation            # TEST 5: Compilation Logging
            flags: "-XX:+PrintCompilation" 
          - name: HeapDumpOnOutOfMemoryError  # TEST 6: Heap Dump On Out Of Memory Error
            flags: "-XX:+HeapDumpOnOutOfMemoryError" 
          - name: UseStringDeduplication      # TEST 7: String Deduplication Performance
            flags: "-XX:+UseStringDeduplication"
    name: Build with ${{ matrix.jvm_flag.name }} Flag
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4.2.1
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      # === Standard Build and Test ===
      - name: Build and Test with Maven
        timeout-minutes: 15
        run: ./mvnw -B verify

      - name: Get JaCoCo Coverage
        id: coverage
        run: |
          coverage=$(python3 config/coverage.py target/site/jacoco/jacoco.csv)
          echo "COVERAGE=${coverage}" >> $GITHUB_ENV

      - name: Fail if coverage has not improved.
        run: |
          coverage=${COVERAGE}
          threshold=24.46
          if (( $(echo "$coverage - $threshold <= 0.1" | bc -l) )); then
            echo "Coverage is not improved."
            exit 1
          else
            echo "New coverage: $coverage%. Coverage is improved!"
          fi

      # === JVM Flag Tests ===

      - name: Set JVM Flags
        run: echo "MAVEN_OPTS=${{ matrix.jvm_flag.flags }}" >> $GITHUB_ENV

      - name: Run Maven Build with JVM Flag
        run: |
          echo "Using MAVEN_OPTS: $MAVEN_OPTS"
          mvn clean install

      - name: Handle GCLogging Specific Script
        if: matrix.jvm_flag.name == 'GCLogging'
        run: |
          chmod +x ./tests_scripts/search_gc_info.sh
          ./tests_scripts/search_gc_info.sh

      - name: Check if build was successful with ${{ matrix.jvm_flag.name }}
        if: success()
        run: echo "The build with ${{ matrix.jvm_flag.name }} was successful."

      - name: Handle failure for ${{ matrix.jvm_flag.name }}
        if: failure()
        run: echo "Build with ${{ matrix.jvm_flag.name }} failed."

      # === Collect Build Logs ===
      - name: Collect Build Logs
        uses: actions/upload-artifact@v3
        with:
          name: build-logs-${{ matrix.jvm_flag.name }}
          path: |
            target/surefire-reports/
            target/jacoco/
            gc.log
            results.log
            *.hprof  # Include heap dump files (only if generated, see HeapDumpOnOutOfMemoryError)

  post_build:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download All Build Logs
        uses: actions/download-artifact@v3
        with:
          name: build-logs-*
          path: ./build-logs

      - name: Aggregate Coverage Metrics
        run: |
          echo "Coverage Metrics per JVM Flag:"
          for file in ./build-logs/*/jacoco.csv; do
            if [ -f "$file" ]; then
              coverage=$(python3 config/coverage.py "$file")
              flag=$(basename $(dirname "$file"))
              echo "$flag: $coverage%"
            fi
          done

      ### ========== HUMOUR ==========
      - name: Add Humorous Comment
        run: |
          echo "Déboguer, c'est comme être le détective dans un film policier où vous êtes aussi le meurtrier." >> ./humour.txt

      - name: Upload Humorous Comment
        uses: actions/upload-artifact@v3
        with:
          name: Humour
          path: ./humour.txt